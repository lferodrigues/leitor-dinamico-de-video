// Atualiza o ano no rodap√©
document.getElementById('currentYear').textContent = new Date().getFullYear();

// Configura√ß√£o inicial de vari√°veis
const videoFiles = [];
let maxVideos = 3; // Valor padr√£o caso o usu√°rio n√£o forne√ßa entrada v√°lida
const videoDirectory = 'Assets/media/';

let currentVideoIndex = 0;

const videoPlayer = document.getElementById('videoPlayer');
const infoText = document.getElementById('info-text');

// Garante que o v√≠deo esteja mudo para permitir reprodu√ß√£o autom√°tica
videoPlayer.muted = true;

// Pergunta ao usu√°rio a quantidade de v√≠deos desejada
function askVideoCount() {
    let userInput = prompt("Quantos v√≠deos deseja passar? (1 a 100)");

    // Valida a entrada do usu√°rio
    const parsedInput = parseInt(userInput, 10);
    if (!isNaN(parsedInput) && parsedInput >= 1 && parsedInput <= 100) {
        maxVideos = parsedInput; // Atualiza o n√∫mero m√°ximo de v√≠deos
    } else {
        alert("Entrada inv√°lida! O n√∫mero de v√≠deos ser√° ajustado para o padr√£o: 3.");
    }

    // Ap√≥s validar, inicializa os v√≠deos e inicia o primeiro
    initializeVideoFiles();
    loadNextVideo(); // Inicia automaticamente o primeiro v√≠deo
}

// Inicializa a lista de v√≠deos com base na quantidade definida
function initializeVideoFiles() {
    for (let i = 1; i <= maxVideos; i++) {
        videoFiles.push(`${videoDirectory}video${i}.mp4`);
    }
}

// Fun√ß√£o para carregar o pr√≥ximo v√≠deo
function loadNextVideo() {
    if (currentVideoIndex >= videoFiles.length) {
        currentVideoIndex = 0; // Reinicia no primeiro v√≠deo
    }
    videoPlayer.src = videoFiles[currentVideoIndex];
    videoPlayer.play().catch((error) => {
        console.error('Erro ao reproduzir o v√≠deo:', error);
    });
    currentVideoIndex++;
}

// Evento para avan√ßar automaticamente ao pr√≥ximo v√≠deo quando o atual terminar
videoPlayer.addEventListener('ended', loadNextVideo);

// Fun√ß√£o para buscar a cota√ß√£o do d√≥lar usando a AwesomeAPI
async function fetchDollarRate() {
    try {
        const response = await fetch('https://economia.awesomeapi.com.br/last/USD-BRL');
        if (!response.ok) {
            throw new Error('Erro ao acessar a API de cota√ß√£o');
        }
        const data = await response.json();

        // Acessa a taxa de c√¢mbio na estrutura da AwesomeAPI
        if (data.USDBRL && data.USDBRL.bid) {
            const dollarRate = parseFloat(data.USDBRL.bid).toFixed(2);
            return `üíµ D√≥lar: R$ ${dollarRate}`;
        } else {
            throw new Error('Dados n√£o encontrados na resposta da API');
        }
    } catch (error) {
        console.error('Erro ao buscar cota√ß√£o do d√≥lar:', error);
        return 'üíµ D√≥lar: Informa√ß√£o indispon√≠vel';
    }
}

// Fun√ß√£o para buscar clima com base na localiza√ß√£o do dispositivo
async function fetchWeatherByIp() {
    try {
        // Acessa a API de geolocaliza√ß√£o por IP
        const ipResponse = await fetch('http://ip-api.com/json');
        if (!ipResponse.ok) {
            throw new Error('Erro ao acessar a API de localiza√ß√£o por IP');
        }

        const ipData = await ipResponse.json();

        // Verifica se os dados de latitude e longitude est√£o presentes
        const { lat, lon } = ipData;

        if (!lat || !lon) {
            throw new Error('N√£o foi poss√≠vel obter a latitude ou longitude');
        }

        // Consulta a API OpenWeatherMap com base na localiza√ß√£o
        const apiKey = '26825e136efd15c22b2ccf106215cc58'; // Substitua pela sua chave da OpenWeatherMap
        const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=pt_br&appid=${apiKey}`;

        const weatherResponse = await fetch(url);
        if (!weatherResponse.ok) {
            throw new Error('Erro ao acessar a API do clima');
        }

        const weatherData = await weatherResponse.json();

        // Extrai descri√ß√£o do clima e temperatura
        const description = weatherData.weather[0].description;
        const temperature = weatherData.main.temp.toFixed(1);

        return `‚òÅÔ∏è Clima: ${description}, ${temperature}¬∞C`;
    } catch (error) {
        console.error('Erro ao buscar clima:', error);
        return '‚òÅÔ∏è Clima: Informa√ß√£o indispon√≠vel';
    }
}

// Fun√ß√£o principal para atualizar informa√ß√µes
async function fetchInfo() {
    try {
        const dollarInfo = await fetchDollarRate();
        const weatherInfo = await fetchWeatherByIp();
        infoText.textContent = `${dollarInfo} | ${weatherInfo}`;
    } catch (error) {
        console.error('Erro ao buscar informa√ß√µes:', error);
        infoText.textContent = 'Erro ao buscar informa√ß√µes.';
    }
}

// Atualiza informa√ß√µes a cada 8 segundos
setInterval(fetchInfo, 8000);

// Fluxo de inicializa√ß√£o
askVideoCount();        // Pergunta ao usu√°rio a quantidade de v√≠deos
fetchInfo();            // Atualiza as informa√ß√µes do rodap√©
